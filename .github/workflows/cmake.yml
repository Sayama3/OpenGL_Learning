name: Build OpenGL Project

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [llvm, gcc]
# Excluding the combination of gcc and macOS as there is some problem from gcc to compile Objective-C
# https://github.com/glfw/glfw/issues/1743
        exclude:
          - os: macos-latest
            compiler: gcc
        include:
          - os: windows-latest
            compiler: msvc
      fail-fast: false

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:

    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

# Setup ubuntu
    - name: Install X11 dependencies on Unix-like system
      if: ${{ contains(matrix.os, 'ubuntu') }}
      run: sudo apt-get update && sudo apt-get install -y xorg-dev

    - name: Install OpenGL on Ubuntu
      if: ${{ contains(matrix.os, 'ubuntu') }}
      run: sudo apt-get update && sudo apt-get install -y libgl1-mesa-glx freeglut3-dev

# Setup macos
    - uses: maxim-lobanov/setup-xcode@v1
      if: ${{ contains(matrix.os, 'macos') }}
      with:
        xcode-version: latest-stable

    - name: Install OpenGL on MacOS
      if: ${{ contains(matrix.os, 'macos') }}
      run: brew install glfw3 glew

    - name: Setup Cpp
      uses: aminya/setup-cpp@v1
      with:
        compiler: ${{ matrix.compiler }}
        vcvarsall: ${{ contains(matrix.os, 'windows') }}
        cmake: true
        ninja: true
        vcpkg: true
        cppcheck: true
        clangtidy: true # instead of `true`, which chooses the default version, you can pass a specific version.

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    # Send build to artifact
    - name: Upload build
      uses: actions/upload-artifact@v3
      with:
        name: Build-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          ${{github.workspace}}/build/Release/resources/shaders/*.frag
          ${{github.workspace}}/build/Release/resources/shaders/*.vert
          ${{github.workspace}}/build/Release/OpenGL.exe
          ${{github.workspace}}/build/Release/OpenGL
          ${{github.workspace}}/build/resources/shaders/*.frag
          ${{github.workspace}}/build/resources/shaders/*.vert
          ${{github.workspace}}/build/OpenGL.exe
          ${{github.workspace}}/build/OpenGL
        if-no-files-found: error

# Cancel release for now
#    # Sending build to release
#    - name: Release Build
#      uses: "marvinpinto/action-automatic-releases@latest"
#      with:
#        repo_token: "${{ secrets.GITHUB_TOKEN }}"
#        automatic_release_tag: latest-${{ matrix.os }}-${{ matrix.compiler }}
#        prerelease: true
#        title: OpenGL Build - ${{ matrix.os }} - ${{ matrix.compiler }}
#        files: |
#          **/OpenGL.exe
#          build/OpenGL
#          README.md
